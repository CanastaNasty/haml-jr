%html
  %head
    %title HamlJr
    %meta(charset="utf-8")

    %script(src="javascripts/lib/cornerstone.js")
    %script(src="javascripts/lib/coffee-script.js")
    %script(src="javascripts/lib/zepto.min.js")
    %script(src="//d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js")
    %script(src="javascripts/web.js")

    :styl
      .editor-wrapper
        display: inline-block
        position: relative
        height: 400px
        width: 33%

        & > div
          position: absolute
          top: 0
          right: 0
          bottom: 0
          left: 0

      #actions
        position: fixed
        top: 20px
        right: 20px

      #errors
        color: red

      body
        background-color: #ECFBFF
        color: #2B231C
        padding-top: 1em
        font-family: helvetica
        margin: auto
        width: 1100px

      .titles
        h2
          display: inline-block
          width: 33%
          margin: 0.25em 0

      #errors
        p
          display: inline-block
          width: 33%
          color: red

          &:empty
            margin: 0

      #debug
        display: none

        code
          display: inline-block
          white-space: pre
          width: 33%

  %body
    %h1 Tempest - Alpha

    %p
      Create simple interactive HTML components using
      %a(href="http://coffeescript.org/") CoffeeScript
      ,
      %a(href="https://github.com/STRd6/haml-jr") HamlJr
      , and
      %a(href="https://github.com/visionmedia/styl") Styl

    %p
      There are still many bugs, but I think this is interesting
      enough to put out into the world for
      %a(href="https://github.com/STRd6/haml-jr/issues") feedback
      .

    %p
      In the data section you return an object that has observable properties.
      In the template these properties are bound to attributes or text.
      As your model is updated the rendered template will always stay up to date.
      The binding is automatic by introspecting the observable properties.

    #actions
      %button.auth Auth
      %button.save Save

    .titles
      %h2 Data
      %h2 Template
      %h2 Style

    #errors
      %p
      %p
      %p

    #debug
      %code
      %code
      %code

    .editor-wrapper
      #data
        :verbatim
          tickets: [
            {name: "None", price: null}
            {name: "Economy", price: 199.95}
            {name: "Business", price: 449.22}
            {name: "First Class", price: 1199.99}
          ]
          chosenTicket: Observable()
          resetTicket: ->
            @chosenTicket(@tickets[0])

    .editor-wrapper
      #template
        :verbatim
          Choose a ticket class:
          %select
            - on "change", @chosenTicket
            - each @tickets, ->
              %option= @name

          %button Clear
            - on "click", @resetTicket

          - with @chosenTicket, ->
            %p
              - if @price
                You have chosen
                %b= @name
                %span $#{@price}
              - else
                No ticket chosen

    .editor-wrapper
      #style
        :verbatim
          #preview
            font-family: helvetica
            padding: 1em

    %h2 Preview

    #preview
